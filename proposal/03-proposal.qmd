# The proposal
<!--
How are you going to solve the problem? Include the concrete actions you
will take and an estimated timeline. What are likely failure modes and
how will you recover from them?

This is where the proposal should be outlined.
-->

## Overview
<!--
At a high-level address what your proposal is and how it will address
the problem identified. Highlight any benefits to the R Community that
follow from solving the problem. This should be your most compelling
section.

Include concrete actions you will take and estimated timeline.
-->

<!-- TODO say something about sf-compatibility in the following sentence -->
The project aims to develop `momer`, an R package that wraps the Python library `momepy` using the `reticulate` package and a mirrored documentation. `momer` will enable R users to perform urban morphometric analyses in a fully `sf`-compatible way, without needing to switch to Python, thereby broadening the reach of `momepy` and increasing the adoption of morphometric methodologies. The development of `momer` is timely as `momepy` is approaching a major release (v1.0.0) which will stabilise its API, making it easier to maintain the R wrapper in the long term. The project will be structured around four main milestones over a 12-month period, from initial setup and basic wrappers to final review and release.

## Detail
<!--
Go into more detail about the specifics of the project and how it delivers
against the problem.

Depending on project type the detail section should include:
-->

### Minimum Viable Product

<!--
What is the smallest thing you can build that delivers value to your users?
-->

The minimum viable product is an R package that (1) wraps all core functions of `momepy`, (2) mirrors its documentation, and (3) includes a detailed documentation for maintainers on how to update the wrappers and documentation with future `momepy` releases.

### Architecture

<!--
What does the high-level architecture look like?
-->

`momer` will wrap exported `momepy` functions with `reticulate` and will be organised into the same nine modules, namely: `elements`, `dimension`, `shape`, `distribution`, `intensity`, `diversity`, `connectivity`, `streetscape`, and `preprocessing`. All functions will be `sf`-compatible. We also aim to set up a workflow to automate the generation of `roxygen2` documentation to be used for the generation of a `pkgdown` website.

### Assumptions

<!--
What assumptions are you making that, if proven false, would invalidate the project?
-->

One of the main assumptions is that with the upcoming major release, the `momepy` API will remain stable, which will allow `momer` to be feasibly maintained. We also assume that there is a feasible way of mirroring the latest version of the documentation with every `momepy` release automatically.

### External dependencies

<!--
What external dependencies does the project have (e.g. libraries, services, other projects, etc.)?
-->

The project primarily depends on the wrapped Python library `momepy` and the R package `reticulate` used for wrapping. The user needs to have Python installed with `momepy` and its dependencies.
